Wyjaśnienie kodu z Pytest: Przewodnik po frameworku (rozszerzona wersja z typami testów)

1. import pytest: Importujemy bibliotekę pytest.
2. import sys, os, warnings: Importujemy moduły do testów z pomijaniem, plikami i ostrzeżeniami.
3. from unittest.mock import patch: Importujemy patch do mockowania.
4. def add(a, b): Definiujemy funkcję dodającą dwie liczby.
5. return a + b: Funkcja zwraca sumę a i b.
6. def divide(a, b): Definiujemy funkcję dzielącą dwie liczby.
7. return a / b: Funkcja zwraca iloraz a i b.
8. def save_result_to_file(result, filename): Definiujemy funkcję zapisującą wynik do pliku.
9. with open(filename, "w") as f: Otwieramy plik w trybie zapisu.
10. f.write(str(result)): Zapisujemy wynik do pliku.
11. def api_add_endpoint(a, b): Definiujemy funkcję symulującą endpoint API.
12. return {"result": add(a, b)}: Zwracamy wynik w formacie JSON.
13. def call_external_api(a, b): Definiujemy funkcję symulującą wywołanie API.
14. result = add(a, b): Obliczamy wynik.
15. print("Wynik API:", result): Drukujemy wynik.
16. return result: Zwracamy wynik.
17. @pytest.fixture: Definiujemy fixture sample_data.
18. def sample_data(): Fixture zwraca słownik z danymi testowymi.
19. return {"a": 2, "b": 3}: Zwracamy dane.
20. @pytest.fixture: Definiujemy fixture temp_file.
21. filename = "temp_result.txt": Ustawiamy nazwę pliku.
22. yield filename: Zwracamy nazwę pliku.
23. if os.path.exists(filename): Sprawdzamy, czy plik istnieje.
24. os.remove(filename): Usuwamy plik po teście.
25. def test_add_unit(): Definiujemy test jednostkowy.
26. assert add(2, 3) == 5, ...: Sprawdzamy, czy 2 + 3 = 5.
27. @pytest.mark.integration: Oznaczamy test jako integracyjny.
28. def test_add_and_save(temp_file): Definiujemy test integracyjny.
29. result = add(2, 3): Obliczamy wynik.
30. save_result_to_file(result, temp_file): Zapisujemy wynik do pliku.
31. with open(temp_file, "r") as f: Odczytujemy zapisany wynik.
32. saved_result = int(f.read()): Konwertujemy wynik na liczbę.
33. assert saved_result == 5, ...: Sprawdzamy, czy zapisany wynik to 5.
34. @pytest.mark.functional: Oznaczamy test jako funkcjonalny.
35. def test_api_add_endpoint(): Definiujemy test funkcjonalny.
36. response = api_add_endpoint(2, 3): Wywołujemy endpoint API.
37. assert response["result"] == 5, ...: Sprawdzamy, czy wynik to 5.
38. @pytest.mark.parametrize("a, b, expected", [...]): Używamy parametryzacji.
39. (1, 1, 2), (0, 5, 5), (-1, 1, 0): Definiujemy zestawy danych.
40. def test_add_parametrized(a, b, expected): Definiujemy test parametryzowany.
41. assert add(a, b) == expected, ...: Sprawdzamy wynik.
42. def test_divide_by_zero(): Definiujemy test wyjątków.
43. with pytest.raises(ZeroDivisionError): Sprawdzamy, czy rzucony zostanie wyjątek.
44. divide(10, 0): Wywołujemy funkcję, która rzuci wyjątek.
45. @patch("builtins.print"): Mockujemy funkcję print.
46. def test_call_external_api(mock_print): Definiujemy test z mockowaniem.
47. result = call_external_api(2, 3): Wywołujemy funkcję API.
48. mock_print.assert_called_with("Wynik API:", result): Sprawdzamy, czy print został wywołany.
49. assert result == 5, ...: Sprawdzamy wynik.
50. def test_add_with_fixture(sample_data): Definiujemy test z fixture.
51. result = add(sample_data["a"], sample_data["b"]): Obliczamy wynik.
52. assert result == 5, ...: Sprawdzamy wynik.
53. @pytest.mark.slow: Oznaczamy test markerem "slow".
54. def test_add_slow(): Definiujemy test z markerem.
55. assert add(1000, 2000) == 3000, ...: Sprawdzamy wynik.
56. @pytest.mark.skipif(...): Pomijamy test w zależności od wersji Pythona.
57. def test_skipif_python_version(): Definiujemy test z pomijaniem.
58. assert True, ...: Test działa tylko na Pythonie 3.8+.
59. @pytest.mark.xfail(...): Oznaczamy test jako oczekujący niepowodzenie.
60. def test_add_expected_failure(): Definiujemy test z xfail.
61. assert add(3, 3) == 7, ...: Test celowo nie przejdzie.
62. def test_print_output(capsys): Definiujemy test przechwytujący wyjście.
63. print("To jest testowe wyjście"): Drukujemy tekst.
64. captured = capsys.readouterr(): Przechwytujemy wyjście.
65. assert captured.out == "To jest testowe wyjście\n", ...: Sprawdzamy wyjście.
66. def test_write_to_tmp_path(tmp_path): Definiujemy test z tmp_path.
67. file = tmp_path / "test_file.txt": Tworzymy plik w tmp_path.
68. file.write_text("Dane w tmp_path"): Zapisujemy dane.
69. assert file.read_text() == "Dane w tmp_path", ...: Sprawdzamy dane.
70. def test_warning(): Definiujemy test z ostrzeżeniami.
71. with pytest.warns(UserWarning): Sprawdzamy ostrzeżenie.
72. warnings.warn("To jest ostrzeżenie", UserWarning): Generujemy ostrzeżenie.

Uruchomienie:
- `pytest test_pytest_example.py -v`: Uruchamia testy z szczegółowym raportem.
- `pytest test_pytest_example.py -m slow`: Uruchamia testy z markerem "slow".
- `pytest test_pytest_example.py -m integration`: Uruchamia testy integracyjne.
- `pytest test_pytest_example.py -m functional`: Uruchamia testy funkcjonalne.